## Demo.Object.To.Object.Mapping.April 2011
=============

WhitePaper Title:
Object to Object Mapping: AutoMapper and ValueInjecter Deliver Real Value ( Domain Models Constrained to Domain Layer ).

In [Domain-Driven Design ( DDD )](http://en.wikipedia.org/wiki/Domain-driven_design), creating a rich domain model is essential for capturing complex real-world representative business process that can deliver business value. Domain models live inside the domain layer, are not portable and not exposed to the outside world by design.  A standard practice is to not expose these models to other layers of the application.  In fact implementing [Model-View-Controller ( MVC )](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller), [Model-View-Presenter  ( MVP )](http://en.wikipedia.org/wiki/Model-view-presenter), or [Model-View-ViewModel ( MVVM )](http://en.wikipedia.org/wiki/Model_View_ViewModel) promote Separation of Concerns ( SoC ) and the concept views are ignorant of the domain models and domains are ignorant of the views.  To implement these patterns and practices, often other models are created, for example Data Transform Objects ( DTOs ), ViewModels, EditModels, and messages.  Object to Object Mapping, flattening or unflattening between domain models and afore mentioned models is tedious, monotonous, error prone, and boring code to write not to mention the needless amount of code to maintain.  Frameworks like AutoMapper and ValueInjecter can help solve our problems, providing convention over configuration, and removing the painful mapping code.

All code examples demonstrated are available in detail in a series of code sample projects.  The sample code is strictly to demonstrate AutoMapper and ValueInjecter value and depict basic usage.  In no way is this code sample best practices on how to structure your applications.  To aid in learning, NUnit is used to wrap code sample functionality into a testable unit that allows debugging. 

The best resource for learning is the framework source code itself.  AutoMapper has an extensive unit test library, perfect to get under the hood and even leverage to test custom extensions.  ValueInjecter has a unit test library too but an even better set of sample projects demonstrating usage in ASP.NET MVC, Silverlight, ASP.NET Web Forms, Win Forms, WPF, and DAL.

[AutoMapper](http://automapper.org/)
[ValueInjecter](http://valueinjecter.codeplex.com/)

### Minimium Install Requirements:
* [Visual Studio 2010](http://www.microsoft.com/visualstudio/eng/products/visual-studio-2010-express)
* [NuGet Package Manager](http://nuget.org/)

### Tools:
* [ReSharper](http://www.jetbrains.com/resharper/)
* [NUnit](http://www.nunit.org/)
